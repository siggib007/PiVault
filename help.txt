Help on module PiVault:

NAME
    PiVault

DESCRIPTION
    Very simply secrets vault. 
     - Takes in a string, encrypts it and stores the encrypted string.
     - Then retrieves the encrypted string and decrypts it for use
    
    Author Siggi Bjarnason AUG 2022
    Copyright 2022
    
    Encrypt/decrypt functions copied from https://stackoverflow.com/a/44212550/8549454
    
    Following packages need to be installed
    pip install pycryptodome
    pip install maskpass
    pip install pyperclip

FUNCTIONS
    AddItem(strKey, strValue, bConf=True, strPass='')
        Function that encrypts the string provided and 
        stores the key value pair in the choosen data store
        Parameters:
          strKey: The name of the key part of the key value pair
          strValue: The value part of the key value pair
          bConf: Optional, defaults to True. If key updates should be confirmed
          strPass: Optional, defaults to blank string. Use a password other than 
                    that validated by login function
        Returns:
          True/false boolean to indicate if the was successful or not
    
    ChangePWD()
        Function that loops through all items in the store, decrypts it then re-encrypts with new password.
        Parameters:
          none
        Returns:
          nothing
    
    CheckVault()
        Function used by login function to check the vault.
        Parameters:
          none
        Returns:
          true/false indicating if the vault is good or not
    
    DefineColors()
        Simple function that loads the dictColor dictionary of colors
        Parameters:
          none
        Returns:
          Sets global variable dictColor but returns nothing
    
    DefineMenu()
        Simple function that loads the menu into a global dictionary dictMenu
        Parameters:
          none
        Returns:
          Sets global variable dictMenu but returns nothing
    
    DisplayHelp()
        Function that displays a help message.
        Parameters:
          none
        Returns:
          none
    
    Fetch2Clip(strKey)
        Function that fetches the specified key from the datastore and decrypts it.
        Decrypted value is then placed on the clipboard and not shown.
        Parameters:
          strKey: The name of the key to be fetched
        Returns:
          nothing
    
    FetchEnv(strVarName)
        Function that fetches the specified content of specified environment variable, 
        converting nonetype to empty string.
        Parameters:
          strVarName: The name of the environment variable to be fetched
        Returns:
          The content of the environment or empty string
    
    FetchItem(strKey)
        Function that fetches the specified key from the datastore and decrypts it.
        Parameters:
          strKey: The name of the key to be fetched
        Returns:
          Either the decrypted string or boolean false to indicate a failure
    
    GetFileHandle(strFileName, strperm)
        This wraps error handling around standard file open function 
        Parameters:
          strFileName: Simple string with filename to be opened
          strperm: single character string, usually w or r to indicate read vs write. other options such as "a" are valid too.
        Returns:
          File Handle object
    
    ListCount()
        Function that displays information about status of the vault and number of members.
        Parameters:
          none
        Returns:
          nothing
    
    ListItems()
        Function that just lists out all the keys in the store.
        Parameters:
          none
        Returns:
          nothing
    
    ProcessCMD(objCmd)
        Function that process all the user commands, whether in the shell or from command arguments.
        Parameters:
          objCmd: The command string, either simple string or an array of strings
        Returns:
          nothing
    
    StringDecryptor(strkey, strData, decode=True)
        This handles decrypting a string encrypted with AES
        Adopted from https://stackoverflow.com/a/44212550/8549454
        Parameters:
          strkey: Simple string with encryption password
          strData: Simple string with the encrypted data
          encode: Optional, defaults to true. A boolean to indicate if the data is Base64 encoded.
        Returns:
          Decrypted clear text simple string
    
    StringEncryptor(strkey, strData, encode=True)
        This handles encrypting a string using AES.
        Adopted from https://stackoverflow.com/a/44212550/8549454
        Parameters:
          strkey: Simple string with encryption password
          strData: Simple string with the data to be encrypted
          encode: Optional, defaults to true. A boolean to indicate the return should be Base64 encoded.
        Returns:
          Encrypted string, either raw or base64 encoded depending on the encode parameter
    
    UserLogin()
        Simple function that handles validating that password is valid across all items in the vault
        Parameters:
          none
        Returns:
          true/false boolean to indicate if password supplied is good or not
    
    main()
        Initial entry point where some of the initialization takes place.
        Parameters:
          none
        Returns:
          nothing

DATA
    bDefHide = False
    bLoggedIn = False
    strCheckFile = 'VaultInit'
    strCheckValue = 'This is a simple secrets vault'
    strDefValueColor = 'red'
    strDefVault = 'VaultData'

FILE
    /root/PiVault/PiVault.py


