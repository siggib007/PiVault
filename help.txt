Help on module PiVault:

NAME
    PiVault

DESCRIPTION
    Very simply secrets vault. 
     - Takes in a string, encrypts it and stores the encrypted string.
     - Then retrieves the encrypted string and decrypts it for use
    
    Author Siggi Bjarnason AUG 2022
    Copyright 2022
    
    Encrypt/decrypt functions copied from https://stackoverflow.com/a/44212550/8549454
    
    Following packages need to be installed for base functionality
    pip install pycryptodome
    pip install maskpass
    
    If you want to use clipboard feature
    pip install pyperclip
    
    If you are using Redis also:
    pip install redis
    
    If you are using TOTP feature
    pip install pyotp

FUNCTIONS
    AddFileItem(strKey, strValue, bConf=True, strPass='')
        Function that encrypts the string provided and 
        stores the key value pair in the file system data store
        Parameters:
          strKey: The name of the key part of the key value pair
          strValue: The value part of the key value pair
          bConf: Optional, defaults to True. If key updates should be confirmed
          strPass: Optional, defaults to blank string. Use a password other than 
                    that validated by login function
        Returns:
          True/false boolean to indicate if the was successful or not
    
    AddItem(strKey, strValue, bConf=True, strPass='')
        Function that calls the right function to encrypt and store the value depend on selected store
        Parameters:
          strKey: The name of the key part of the key value pair
          strValue: The value part of the key value pair
          bConf: Optional, defaults to True. If key updates should be confirmed
          strPass: Optional, defaults to blank string. Use a password other than 
                    that validated by login function
        Returns:
          True/false boolean to indicate if the was successful or not
    
    AddRedisItem(strKey, strValue, bConf=True, strPass='')
        Function that encrypts the string provided and
        stores the key value pair in the Redis data store
        Parameters:
          strKey: The name of the key part of the key value pair
          strValue: The value part of the key value pair
          bConf: Optional, defaults to True. If key updates should be confirmed
          strPass: Optional, defaults to blank string. Use a password other than
                    that validated by login function
        Returns:
          True/false boolean to indicate if the value was successful or not
    
    AddSQLItem(strKey, strValue, bConf=True, strPass='')
        Function that encrypts the string provided and
        stores the key value pair in the selected database
        Parameters:
          strKey: The name of the key part of the key value pair
          strValue: The value part of the key value pair
          bConf: Optional, defaults to True. If key updates should be confirmed
          strPass: Optional, defaults to blank string. Use a password other than
                    that validated by login function
        Returns:
          True/false boolean to indicate if the value was successful or not
    
    ChangePWD()
        Function that loops through all items in the store, decrypts it then re-encrypts with new password.
        Parameters:
          none
        Returns:
          nothing
    
    CheckDependency(Module)
        Function that installs missing depedencies
        Parameters:
          Module : The name of the module that should be installed
        Returns:
          dictionary object without output from the installation.
            if the module needed to be installed
              code: Return code from the installation
              stdout: output from the installation
              stderr: errors from the installation
              args: list object with the arguments used during installation
              success: true/false boolean indicating success.
            if module was already installed so no action was taken
              code: -5
              stdout: Simple String: {module} version {x.y.z} already installed
              stderr: Nonetype
              args: module name as passed in
              success: True as a boolean
    
    CheckVault()
        Function used by login function to check the vault.
        Parameters:
          none
        Returns:
          true/false indicating if the vault is good or not
    
    DBConnect(*, DBType, Server, DBUser='', DBPWD='', Database='')
        Function that handles establishing a connection to a specified database
        imports the right module depending on database type
        Parameters:
          DBType : The type of database server to connect to
                      Supported server types are sqlite, mssql, mysql and postgres
          Server : Hostname for the database server
          DBUser : Database username
          DBPWD  : Password for the database user
          Database  : The name of the database to use
        Returns:
          Connection object to be used by query function, or an error string
    
    DBQuery(*, SQL, dbConn)
        Function that handles executing a SQL query using a predefined connection object
        imports the right module depending on database type
        Parameters:
          SQL    : The query to be executed
          dbConn : The connection object to use
        Returns:
          NoneType for queries other than select, DBCursor object with the results from the select query
          or error message as a string
    
    DefineColors()
        Simple function that loads the dictColor dictionary of colors
        Parameters:
          none
        Returns:
          Sets global variable dictColor but returns nothing
    
    DefineMenu()
        Simple function that loads the menu into a global dictionary dictMenu
        Parameters:
          none
        Returns:
          Sets global variable dictMenu but returns nothing
    
    DelItem(strKey)
        Function that removes a key from the datastore
        Parameters:
          strKey: The name of the key part of the key value pair
        Returns:
          Nothing
    
    DisplayHelp()
        Function that displays a help message.
        Parameters:
          none
        Returns:
          none
    
    Fetch2Clip(strKey)
        Function that fetches the specified key from the datastore and decrypts it.
        Decrypted value is then placed on the clipboard and not shown.
        Parameters:
          strKey: The name of the key to be fetched
        Returns:
          nothing
    
    FetchEnv(strVarName)
        Function that fetches the specified content of specified environment variable, 
        converting nonetype to empty string.
        Parameters:
          strVarName: The name of the environment variable to be fetched
        Returns:
          The content of the environment or empty string
    
    FetchFileItem(strKey)
        Function that fetches the specified key from the file store and decrypts it.
        Parameters:
          strKey: The name of the key to be fetched
        Returns:
          Either the decrypted string or boolean false to indicate a failure
    
    FetchItem(strKey)
        Function that calls the right function to fetch and decrypt depend on selected store
        Parameters:
          strKey: The name of the key to be fetched
        Returns:
          Either the decrypted string or boolean false to indicate a failure
    
    FetchRedisItem(strKey)
        Function that fetches the specified key from Redis and decrypts it.
        Parameters:
          strKey: The name of the key to be fetched
        Returns:
          Either the decrypted string or boolean false to indicate a failure
    
    FetchSQLItem(strKey)
        Function that fetches the specified key from database and decrypts it.
        Parameters:
          strKey: The name of the key to be fetched
        Returns:
          Either the decrypted string or boolean false to indicate a failure
    
    GetFileHandle(strFileName, strperm)
        This wraps error handling around standard file open function 
        Parameters:
          strFileName: Simple string with filename to be opened
          strperm: single character string, usually w or r to indicate read vs write. other options such as "a" are valid too.
        Returns:
          File Handle object
    
    ListCount()
        Function that displays information about status of the vault and number of members.
        Parameters:
          none
        Returns:
          nothing
    
    ListItems()
        Function that just lists out all the keys in the store.
        Parameters:
          none
        Returns:
          nothing
    
    ProcessCMD(objCmd)
        Function that process all the user commands, whether in the shell or from command arguments.
        Parameters:
          objCmd: The command string, either simple string or an array of strings
        Returns:
          nothing
    
    ResetStore()
        Function that completely resets the choosen store to a blank slate
        Parameters:
          none
        Returns:
          Nothing
    
    SQLOp(strCmd, strKey='', strValue='')
        This handles all database operations
        Parameters:
          strCmd: Which operation is needed
          strkey: Optional, defaults to an empty string. The name of the key part of the key value pair
          strValue: Optional, defaults to an empty string. The value part of the key value pair.
        Returns:
          Decrypted clear text simple string
    
    ShowTOTP(strKey)
        Function that fetches the specified key from the datastore and decrypts it.
        Decrypted value is then used to generate a time based one time token.
        Parameters:
          strKey: The name of the key to be fetched
        Returns:
          A string with the generated token, or bolean false on failure
    
    StringDecryptor(strPWD, strData, decode=True)
        This handles decrypting a string encrypted with AES
        Adopted from https://stackoverflow.com/a/44212550/8549454
        Parameters:
          strPWD: Simple string with encryption password
          strData: Simple string with the encrypted data
          encode: Optional, defaults to true. A boolean to indicate if the data is Base64 encoded.
        Returns:
          Decrypted clear text simple string
    
    StringEncryptor(strPWD, strData, encode=True)
        This handles encrypting a string using AES.
        Adopted from https://stackoverflow.com/a/44212550/8549454
        Parameters:
          strPWD: Simple string with encryption password
          strData: Simple string with the data to be encrypted
          encode: Optional, defaults to true. A boolean to indicate the return should be Base64 encoded.
        Returns:
          Encrypted string, either raw or base64 encoded depending on the encode parameter
    
    UserLogin()
        Simple function that handles validating that password is valid across all items in the vault
        Parameters:
          none
        Returns:
          true/false boolean to indicate if password supplied is good or not
    
    VaultInit()
        Function that handles initial inititialization of the specified store.
        Parameters:
          none
        Returns:
          nothing returned. Applicable global variables are set.
    
    main()
        Initial entry point where some of the initialization takes place.
        Parameters:
          none
        Returns:
          nothing

DATA
    bDefHide = False
    bLoggedIn = False
    dictComponents = {}
    lstDBTypes = ['sqlite', 'mysql', 'postgres', 'mssql']
    strCheckFile = 'VaultInit'
    strCheckValue = 'This is a simple secrets vault'
    strDefStore = 'files'
    strDefValueColor = 'red'
    strDefVault = 'VaultData'
